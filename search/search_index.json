{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"wtc-cloud-eng/mkdocs-terraform-monorepo-plugin \u00b6 Note: This plugin is in beta. Whilst it is not expected to significantly change in functionality, it may not yet be fully compatible with other Mkdocs configuration and thus may break with some advanced configurations. Once these have been resolved and all bugs have been ironed out, we will move this to a stable release. \u271a This plugin enables you to build multiple sets of documentation in a single Mkdocs. It is designed to address writing documentation for Terraform monorepos, particularly when used with terraform-docs . \ud83d\udc0d Python Package | \u271a Demo | \ud83d\udcd5 Repo Note: This project was adapted from the Spotify backstage monorepo plugin. It follows the same structure, test patterns, principles and release patterns. Features \u00b6 Support for multiple module root folders in Mkdocs. Having a single docs/ folder in a terraform codebase is hard to maintain. Who owns which documentation? What code is it associated with? Bringing docs closer to the associated code enables you to update them better, as well as leverage folder-based features such as GitHub Codeowners and documentation tooling such as terraform-docs Limited support for backstage monorepo plugin navigations. With the monorepo plugin, you can nest mkdocs.yml files deeper in the tree and have separate navigations. As the monrepo and terrafrom monorepo plugins both manipulate the same nav and docs structures, they can work together, provided monorepo is in the plugins list before terraform-monorepo. The same great Mkdocs developer experience. It is possible to run mkdocs serve in the root to merge all of your documentation together, or in a subfolder to build specific documentation. Autoreload still works as usual. No more using symlinks ! Install \u00b6 It\u2019s easy to get started using PyPI and pip using Python: $ pip install mkdocs-terraform-monorepo-plugin Usage \u00b6 Take a look at our sample project or do the following: In the root, add terraform-monorepo to your plugins key in mkdocs.yml Create a subfolder, with a mkdocs.yml with a site_name and nav , as well as a docs/ folder with an index.md Back in in the root mkdocs.yml , use the !tf_modules_root syntax in your nav to link to to a folder containing terraform markdown documentation. Example root /mkdocs.yml\u201d \u00b6 site_name: terraform monorepo nav: - Intro: 'index.md' - Modules: - AWS: '!tf_modules_root ./aws' - Azure: '!tf_modules_root ./azurerm' - GCP: '!tf_modules_root ./gcp' plugins: - terraform-monorepo An example filetree when using the Mkdocs Terraform Monorepo plugin looks like this: $ tree . . \u251c\u2500\u2500 aws \u2502 \u251c\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 s3 \u2502 \u2514\u2500\u2500 private_bucket \u2502 \u2514\u2500\u2500 README.md \u251c\u2500\u2500 azurerm \u2502 \u251c\u2500\u2500 blob_storage \u2502 \u2502 \u2514\u2500\u2500 container \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 gcp \u2502 \u2514\u2500\u2500 README.md \u2514\u2500\u2500 mkdocs.yml 8 directories, 7 files Supported Versions \u00b6 Python 3 \u2014 3.6, 3.7 Mkdocs 1.1.1 and above. [monorepo plugin] 0.4.5. License \u00b6 Released under the Apache 2.0 License. See here for more details. Also see backstage monorepo for more details. Contributing \u00b6 Check out our CONTRIBUTING for more details. Extra Reading \u00b6 mkdocs on GitHub Mkdocs documentation This was built using the mkdocs-plugin-template","title":"Getting Started"},{"location":"#wtc-cloud-engmkdocs-terraform-monorepo-plugin","text":"Note: This plugin is in beta. Whilst it is not expected to significantly change in functionality, it may not yet be fully compatible with other Mkdocs configuration and thus may break with some advanced configurations. Once these have been resolved and all bugs have been ironed out, we will move this to a stable release. \u271a This plugin enables you to build multiple sets of documentation in a single Mkdocs. It is designed to address writing documentation for Terraform monorepos, particularly when used with terraform-docs . \ud83d\udc0d Python Package | \u271a Demo | \ud83d\udcd5 Repo Note: This project was adapted from the Spotify backstage monorepo plugin. It follows the same structure, test patterns, principles and release patterns.","title":"wtc-cloud-eng/mkdocs-terraform-monorepo-plugin"},{"location":"#features","text":"Support for multiple module root folders in Mkdocs. Having a single docs/ folder in a terraform codebase is hard to maintain. Who owns which documentation? What code is it associated with? Bringing docs closer to the associated code enables you to update them better, as well as leverage folder-based features such as GitHub Codeowners and documentation tooling such as terraform-docs Limited support for backstage monorepo plugin navigations. With the monorepo plugin, you can nest mkdocs.yml files deeper in the tree and have separate navigations. As the monrepo and terrafrom monorepo plugins both manipulate the same nav and docs structures, they can work together, provided monorepo is in the plugins list before terraform-monorepo. The same great Mkdocs developer experience. It is possible to run mkdocs serve in the root to merge all of your documentation together, or in a subfolder to build specific documentation. Autoreload still works as usual. No more using symlinks !","title":"Features"},{"location":"#install","text":"It\u2019s easy to get started using PyPI and pip using Python: $ pip install mkdocs-terraform-monorepo-plugin","title":"Install"},{"location":"#usage","text":"Take a look at our sample project or do the following: In the root, add terraform-monorepo to your plugins key in mkdocs.yml Create a subfolder, with a mkdocs.yml with a site_name and nav , as well as a docs/ folder with an index.md Back in in the root mkdocs.yml , use the !tf_modules_root syntax in your nav to link to to a folder containing terraform markdown documentation.","title":"Usage"},{"location":"#example-root-mkdocsyml","text":"site_name: terraform monorepo nav: - Intro: 'index.md' - Modules: - AWS: '!tf_modules_root ./aws' - Azure: '!tf_modules_root ./azurerm' - GCP: '!tf_modules_root ./gcp' plugins: - terraform-monorepo An example filetree when using the Mkdocs Terraform Monorepo plugin looks like this: $ tree . . \u251c\u2500\u2500 aws \u2502 \u251c\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 s3 \u2502 \u2514\u2500\u2500 private_bucket \u2502 \u2514\u2500\u2500 README.md \u251c\u2500\u2500 azurerm \u2502 \u251c\u2500\u2500 blob_storage \u2502 \u2502 \u2514\u2500\u2500 container \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 gcp \u2502 \u2514\u2500\u2500 README.md \u2514\u2500\u2500 mkdocs.yml 8 directories, 7 files","title":"Example root /mkdocs.yml\""},{"location":"#supported-versions","text":"Python 3 \u2014 3.6, 3.7 Mkdocs 1.1.1 and above. [monorepo plugin] 0.4.5.","title":"Supported Versions"},{"location":"#license","text":"Released under the Apache 2.0 License. See here for more details. Also see backstage monorepo for more details.","title":"License"},{"location":"#contributing","text":"Check out our CONTRIBUTING for more details.","title":"Contributing"},{"location":"#extra-reading","text":"mkdocs on GitHub Mkdocs documentation This was built using the mkdocs-plugin-template","title":"Extra Reading"},{"location":"CHANGELOG/","text":"Changelog \u00b6 0.1.1 \u00b6 Documentation Update 0.1.0 \u00b6 Initial release.","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#011","text":"Documentation Update","title":"0.1.1"},{"location":"CHANGELOG/#010","text":"Initial release.","title":"0.1.0"},{"location":"CODE-OF-CONDUCT/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at wtc.people@wundermanthompson.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Code of Conduct"},{"location":"CODE-OF-CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE-OF-CONDUCT/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"CODE-OF-CONDUCT/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE-OF-CONDUCT/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"CODE-OF-CONDUCT/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"CODE-OF-CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at wtc.people@wundermanthompson.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"CODE-OF-CONDUCT/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"CODE-OF-CONDUCT/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"CODE-OF-CONDUCT/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"CODE-OF-CONDUCT/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"CODE-OF-CONDUCT/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"CODE-OF-CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 We welcome contributions! We believe that by fostering a healthy, inclusive, and active open source community that we will be able to build better software for all. A large part of that is by having an enforced code of conduct as well easy to use contributing guidelines. Prerequisites \u00b6 Python 3+ or above (with Pip) Mkdocs 1.0.4 or above Docker Git Build from source \u00b6 This part should be easy. If it\u2019s not, let us know! The first thing you\u2019ll want to do is import the repository and open up the directory. $ git clone git@github.com:wtc-cloud-eng/mkdocs-terraform-monorepo-plugin.git Then using the --editable flag, you can install the package locally. This points the actual plugin to the folder which allows you to make changes dynamically without having to re-install it every time you want to test a change. $ cd mkdocs-terraform-monorepo-plugin/ $ pip install --editable . $ pip install -r requirements.txt Great, now you have the terraform-monorepo plugin available in Mkdocs . This allows you to do the following in an mkdocs.yml without errors: site_name : Example Site plugins : - terraform-monorepo Of course, you\u2019ll need a folder to test it in. There is a conveniently folder named sample-docs/ folder that you can use to test your changes, although you can run mkdocs serve in any project you want as long as the mkdocs.yml has terraform-monorepo mentioned in the plugins key. $ cd sample-docs/ $ mkdocs serve Optionally, you can run it using Mkdocs Material which is what is powering the docs you\u2019re currently looking at. It makes Mkdocs really nice to work with. You can then simply pass through --theme to your mkdocs serve command like usual. $ pip install mkdocs-material $ mkdocs serve --theme material That\u2019s pretty much it. Experiment, play about, make the changes you need. How does it work? \u00b6 Oh yes, that\u2019s worth mentioning! It works quite easily actually. There are two parts to the process: resolving the navigation, and merging the documentation folders. Resolving the navigation \u00b6 This is responsible for making sure whenever you use the !tf_modules_root statement in nav inside our mkdocs.yml that we walk the folder looking for README.md files, and then appropriately import that into the nav . So to give you an example: ```yaml tab=\u201dSource mkdocs.yml files\u201d mkdocs.yml \u00b6 site_name: Example Site plugins: - terraform-monorepo nav: - Getting Started: README.md - Modules: - Convention: \u2018!tf_modules_root convention\u2019 - Contributing: contributing.md Any mid-level README found in the tree is treated as a general `About` document for the module. For example, the directory tree might look like this for the above mkdocs.yaml: ```bash ```terminal $ tree . \u251c\u2500\u2500 convention \u2502 \u251c\u2500\u2500 naming \u2502 \u2502 \u251c\u2500\u2500 compute \u2502 \u2502 \u2502 \u251c\u2500\u2500 faas \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2502 \u2502 \u2514\u2500\u2500 machine \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2502 \u251c\u2500\u2500 dns \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2502 \u251c\u2500\u2500 storage \u2502 \u2502 \u2502 \u2514\u2500\u2500 bucket \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 tags \u2514\u2500\u2500 README.md The navigation would be: Convention -> naming -> About # and the tree path is convention/naming/README.md Convention -> naming -> storage -> bucket # and the tree path is convention/naming/storage/bucket/README.md This is to avoid repetition in naming of a module that has a tree - e.g. preventing a nav of Convention -> naming -> Naming, while allowing the naming node of the tree to have navigable children. The Python code related to this component lives in mkdocs_terraform_monorepo_plugin/parser.py . Merging the docs folders \u00b6 This takes the work the resolver does and applies it to reality. It is responsible for creating a temporary folder using Python\u2019s TemporaryFolder() and moves the docs/ folder. The Python code related to this component lives in mkdocs_terraform_monorepo_plugin/merger.py . Making a change \u00b6 That\u2019s excellent! We\u2019re very happy that you\u2019d like to contribute. We are very welcoming to any contributions. It is important to note a few things before you do so: Consider opening an issue first. It\u2019s easy to fall into the trap to create a bug for something that isn\u2019t agreed upon. GitHub issues is a great way to act as a validator for your contribution ideas. We try our best to engage in these as much as possible to make this as painless as possible, as it\u2019s easier to write the code than discuss it. It also significantly reduces the chances of us rejecting it. Write tests. Of course, shipping stuff is pretty cool. Especially when it\u2019s a really nice improvement. In this case, there will have many others depending on our source code. It is a small ask for ask you to test your code in a basic capacity, so that it isn\u2019t prone to being broken or removed in the future accidentally. Adding complete test coverage is something we will suggest on a case-by-case basis, depending on the type of change it is. Not every contribution will be approved. Of course, given how much volunteered time you and others spend, it is a great way of saying thank you for to accept and merge every pull request - but in reality, doing so is more harmful than valuable. We want to leverage open source to make software better for everyone rather than for a few. This means considering the long-term value of changes, as well as any impact it may have - will it break existing integrations? will it slow performance? is this a convention others will understand? As a general rule of thumb, we highly encourage you open a GitHub issue first to discuss your ideas. It will help everyone in the long run for just a little bit more time. That out of the way, here\u2019s what you need to do: $ git checkout -b username/branch-name # ... make your changes $ code ./setup.py # make sure you bump up the version on line 6 $ git add --patch # validate your changes $ git commit -m 'changed X and Y' # ensure you write a meaningful commit message $ git push -u origin HEAD It might say you don\u2019t have permissions to push to our repository. That\u2019s alright, using hub fork you can fork the repository on GitHub and then replace the origin remote with your own directly from your Terminal: $ hub fork --remote-name origin $ git remote rm origin $ git remote add origin git@github.com:[USERNAME]/mkdocs-terraform-monorepo-plugin.git $ git push -u origin HEAD $ hub pull-request -b wtc-cloud-eng:main --message 'Pull request title' --browse # add --draft if you want to push it as a draft PR This will create the pull request in our repository. You can of course do it through GitHub.com or their desktop clients too :) Running tests \u00b6 The command below will use Docker to run our test suites in numerous Python versions. It may take some time on first run, but should be very fast afterwards. When you\u2019re done, feel free to run docker prune to clear them from your local cache. We use the slim versions of the public python images from Docker Hub . $ ./__tests__/test-local.sh For faster tests, you can opt to run in Python 3.7 rather than all supported Python versions: $ PYTHON_37_ONLY=1 ./__tests__/test-local.sh GitHub Actions will always execute tests a little faster (due to parallelization) when you push your branch. Due to this, you can choose to opt of running them locally if you wish! Submitting a PR \u00b6 Feel free to open up a PR and share why you think this change is valuable (unless it\u2019s something obvious, like a typo or confirmed bug). Assuming it is a change that is wanted, a maintainer will take a look to see if there\u2019s any changes needed.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"We welcome contributions! We believe that by fostering a healthy, inclusive, and active open source community that we will be able to build better software for all. A large part of that is by having an enforced code of conduct as well easy to use contributing guidelines.","title":"Contributing"},{"location":"CONTRIBUTING/#prerequisites","text":"Python 3+ or above (with Pip) Mkdocs 1.0.4 or above Docker Git","title":"Prerequisites"},{"location":"CONTRIBUTING/#build-from-source","text":"This part should be easy. If it\u2019s not, let us know! The first thing you\u2019ll want to do is import the repository and open up the directory. $ git clone git@github.com:wtc-cloud-eng/mkdocs-terraform-monorepo-plugin.git Then using the --editable flag, you can install the package locally. This points the actual plugin to the folder which allows you to make changes dynamically without having to re-install it every time you want to test a change. $ cd mkdocs-terraform-monorepo-plugin/ $ pip install --editable . $ pip install -r requirements.txt Great, now you have the terraform-monorepo plugin available in Mkdocs . This allows you to do the following in an mkdocs.yml without errors: site_name : Example Site plugins : - terraform-monorepo Of course, you\u2019ll need a folder to test it in. There is a conveniently folder named sample-docs/ folder that you can use to test your changes, although you can run mkdocs serve in any project you want as long as the mkdocs.yml has terraform-monorepo mentioned in the plugins key. $ cd sample-docs/ $ mkdocs serve Optionally, you can run it using Mkdocs Material which is what is powering the docs you\u2019re currently looking at. It makes Mkdocs really nice to work with. You can then simply pass through --theme to your mkdocs serve command like usual. $ pip install mkdocs-material $ mkdocs serve --theme material That\u2019s pretty much it. Experiment, play about, make the changes you need.","title":"Build from source"},{"location":"CONTRIBUTING/#how-does-it-work","text":"Oh yes, that\u2019s worth mentioning! It works quite easily actually. There are two parts to the process: resolving the navigation, and merging the documentation folders.","title":"How does it work?"},{"location":"CONTRIBUTING/#resolving-the-navigation","text":"This is responsible for making sure whenever you use the !tf_modules_root statement in nav inside our mkdocs.yml that we walk the folder looking for README.md files, and then appropriately import that into the nav . So to give you an example: ```yaml tab=\u201dSource mkdocs.yml files\u201d","title":"Resolving the navigation"},{"location":"CONTRIBUTING/#mkdocsyml","text":"site_name: Example Site plugins: - terraform-monorepo nav: - Getting Started: README.md - Modules: - Convention: \u2018!tf_modules_root convention\u2019 - Contributing: contributing.md Any mid-level README found in the tree is treated as a general `About` document for the module. For example, the directory tree might look like this for the above mkdocs.yaml: ```bash ```terminal $ tree . \u251c\u2500\u2500 convention \u2502 \u251c\u2500\u2500 naming \u2502 \u2502 \u251c\u2500\u2500 compute \u2502 \u2502 \u2502 \u251c\u2500\u2500 faas \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2502 \u2502 \u2514\u2500\u2500 machine \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2502 \u251c\u2500\u2500 dns \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2502 \u251c\u2500\u2500 storage \u2502 \u2502 \u2502 \u2514\u2500\u2500 bucket \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2502 \u2514\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 tags \u2514\u2500\u2500 README.md The navigation would be: Convention -> naming -> About # and the tree path is convention/naming/README.md Convention -> naming -> storage -> bucket # and the tree path is convention/naming/storage/bucket/README.md This is to avoid repetition in naming of a module that has a tree - e.g. preventing a nav of Convention -> naming -> Naming, while allowing the naming node of the tree to have navigable children. The Python code related to this component lives in mkdocs_terraform_monorepo_plugin/parser.py .","title":"mkdocs.yml"},{"location":"CONTRIBUTING/#merging-the-docs-folders","text":"This takes the work the resolver does and applies it to reality. It is responsible for creating a temporary folder using Python\u2019s TemporaryFolder() and moves the docs/ folder. The Python code related to this component lives in mkdocs_terraform_monorepo_plugin/merger.py .","title":"Merging the docs folders"},{"location":"CONTRIBUTING/#making-a-change","text":"That\u2019s excellent! We\u2019re very happy that you\u2019d like to contribute. We are very welcoming to any contributions. It is important to note a few things before you do so: Consider opening an issue first. It\u2019s easy to fall into the trap to create a bug for something that isn\u2019t agreed upon. GitHub issues is a great way to act as a validator for your contribution ideas. We try our best to engage in these as much as possible to make this as painless as possible, as it\u2019s easier to write the code than discuss it. It also significantly reduces the chances of us rejecting it. Write tests. Of course, shipping stuff is pretty cool. Especially when it\u2019s a really nice improvement. In this case, there will have many others depending on our source code. It is a small ask for ask you to test your code in a basic capacity, so that it isn\u2019t prone to being broken or removed in the future accidentally. Adding complete test coverage is something we will suggest on a case-by-case basis, depending on the type of change it is. Not every contribution will be approved. Of course, given how much volunteered time you and others spend, it is a great way of saying thank you for to accept and merge every pull request - but in reality, doing so is more harmful than valuable. We want to leverage open source to make software better for everyone rather than for a few. This means considering the long-term value of changes, as well as any impact it may have - will it break existing integrations? will it slow performance? is this a convention others will understand? As a general rule of thumb, we highly encourage you open a GitHub issue first to discuss your ideas. It will help everyone in the long run for just a little bit more time. That out of the way, here\u2019s what you need to do: $ git checkout -b username/branch-name # ... make your changes $ code ./setup.py # make sure you bump up the version on line 6 $ git add --patch # validate your changes $ git commit -m 'changed X and Y' # ensure you write a meaningful commit message $ git push -u origin HEAD It might say you don\u2019t have permissions to push to our repository. That\u2019s alright, using hub fork you can fork the repository on GitHub and then replace the origin remote with your own directly from your Terminal: $ hub fork --remote-name origin $ git remote rm origin $ git remote add origin git@github.com:[USERNAME]/mkdocs-terraform-monorepo-plugin.git $ git push -u origin HEAD $ hub pull-request -b wtc-cloud-eng:main --message 'Pull request title' --browse # add --draft if you want to push it as a draft PR This will create the pull request in our repository. You can of course do it through GitHub.com or their desktop clients too :)","title":"Making a change"},{"location":"CONTRIBUTING/#running-tests","text":"The command below will use Docker to run our test suites in numerous Python versions. It may take some time on first run, but should be very fast afterwards. When you\u2019re done, feel free to run docker prune to clear them from your local cache. We use the slim versions of the public python images from Docker Hub . $ ./__tests__/test-local.sh For faster tests, you can opt to run in Python 3.7 rather than all supported Python versions: $ PYTHON_37_ONLY=1 ./__tests__/test-local.sh GitHub Actions will always execute tests a little faster (due to parallelization) when you push your branch. Due to this, you can choose to opt of running them locally if you wish!","title":"Running tests"},{"location":"CONTRIBUTING/#submitting-a-pr","text":"Feel free to open up a PR and share why you think this change is valuable (unless it\u2019s something obvious, like a typo or confirmed bug). Assuming it is a change that is wanted, a maintainer will take a look to see if there\u2019s any changes needed.","title":"Submitting a PR"},{"location":"LICENSE/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License. \u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d \u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2019 Spotify AB Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"LICENSE"},{"location":"limitations/","text":"Caveats / Known Design Decisions \u00b6 In the modules directory, the only doc file searched for is README.md If a folder, with child documentation, also has a README.md in it, the Navigation item will be called About Due to how backstage monorepo manipulates the navigation and docs folder, the terraform-monorepo plugin should be listed after the monorepo plugin in order for nested mkdocs files to render if using the backstage monorepo in conjustion with this plugin, backstage monorepo plugin should be pinned to 0.4.5 to prevent an error in rendering the site - introduced in this change","title":"Limitations"},{"location":"limitations/#caveats-known-design-decisions","text":"In the modules directory, the only doc file searched for is README.md If a folder, with child documentation, also has a README.md in it, the Navigation item will be called About Due to how backstage monorepo manipulates the navigation and docs folder, the terraform-monorepo plugin should be listed after the monorepo plugin in order for nested mkdocs files to render if using the backstage monorepo in conjustion with this plugin, backstage monorepo plugin should be pinned to 0.4.5 to prevent an error in rendering the site - introduced in this change","title":"Caveats / Known Design Decisions"},{"location":"philosophy/","text":"Philosophy \u00b6 This plugin is designed to solve documentation in terraform monorepo codebases \u2014 where terraform practices keep theoir documentation within the module, and outside a documentation tree \u2014 by enabling Mkdocs to be include any documentation found in a terraform modules folder. Then when shipping a change to production, merge the documentation together into a single, digestable site.","title":"Philosophy"},{"location":"philosophy/#philosophy","text":"This plugin is designed to solve documentation in terraform monorepo codebases \u2014 where terraform practices keep theoir documentation within the module, and outside a documentation tree \u2014 by enabling Mkdocs to be include any documentation found in a terraform modules folder. Then when shipping a change to production, merge the documentation together into a single, digestable site.","title":"Philosophy"}]}